#define_constant MAX_OUTPUTS  200
#define_constant MAX_INPUTS  200


#INCLUDEPATH "..\\AVProEdge_MXNet\\SimplSharp\\AVProEdge_MXNet\\bin\\debug"
#USER_SIMPLSHARP_LIBRARY "libAVProEdge_MXNet_1.6.7"



digital_input REDISCOVER_UNITS, 
				REBOOT_ALL_DEVICES,
				AUTO_CONFIGURE_ALIASES,
				CLEAR_ALL_ALIAS,
				STREAM_CONTROL;

string_input UCMD[256];
string_input CUSTOM_COMMAND[256];
buffer_input COMBINED_SWITCH[256];
buffer_input VIDEO_SWITCH[256];
buffer_input AUDIO_SWITCH[256];
buffer_input FAVOURITES[256];
buffer_input VIDEO_WALL[10000];
buffer_input SERIAL_SETTINGS[1024];
buffer_input CONFIGURE_TX_DEVICES[2000];
buffer_input CONFIGURE_RX_DEVICES[2000];
buffer_input IR[1024];

STRING_OUTPUT CONNECTION_STATUS;
STRING_OUTPUT CONFIGURATION_STATUS;
DIGITAL_OUTPUT CONNECTION_STATE;

STRING_OUTPUT VIDEO_SWITCH_FEEDBACK;
STRING_OUTPUT AUDIO_SWITCH_FEEDBACK;
STRING_OUTPUT HOT_PLUG_FEEDBACK;
string_output OUTPUT_NAME[MAX_OUTPUTS];
string_output INPUT_NAME[MAX_INPUTS];


/*******************************************************************************************
Parameters
*******************************************************************************************/

string_parameter ip_address[15];	
integer_parameter port;
integer_parameter poll_time;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
Mxnet AVSwitchCSInstance;
CMutex buffer_mutex;

string g_outputAliasName[MAX_OUTPUTS][254];
string g_inputAliasName[MAX_INPUTS][254];
string favStr[60000];
integer isSynchronised,outputChanged[MAX_OUTPUTS];



/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/



CALLBACK FUNCTION ConnectionStatusFunc(string connstatus)
{
	CONNECTION_STATUS = connstatus;
}


CALLBACK FUNCTION ConnectionStateFunc(integer connstate)
{
	CONNECTION_STATE = connstate;
}

CALLBACK FUNCTION ConfigurationStatusFunc(string configstatus)
{
	CONFIGURATION_STATUS = configstatus;
}

CALLBACK FUNCTION AliasExtractInFunc(integer deviceNumber, string aliasName)
{
	if( deviceNumber > 0 && deviceNumber <= MAX_INPUTS )
	{
		INPUT_NAME[deviceNumber] = aliasName;
	}
	else
	{
		Print("Invalid alias number");
	}
}

CALLBACK FUNCTION AliasExtractOutFunc(integer deviceNumber, string aliasName)
{
	if( deviceNumber > 0 && deviceNumber <= MAX_OUTPUTS )
	{
		OUTPUT_NAME[deviceNumber] = aliasName;
	}
	else
	{
		CONFIGURATION_STATUS = aliasName + " is an invalid Alias Name";
	}
}


CALLBACK FUNCTION SwitchFeedbackFunc(string resp, string type)
{
	if(type = "video" || type = "comb")
	{
		VIDEO_SWITCH_FEEDBACK = resp;
	}
	else if(type = "audio")
	{
		AUDIO_SWITCH_FEEDBACK = resp;
	}
	
}


CALLBACK FUNCTION HotPlugFeedbackFunc(string resp)
{
	HOT_PLUG_FEEDBACK = resp;
}

CHANGE VIDEO_SWITCH
{
	buffer_mutex.WaitForMutex();
	AVSwitchCSInstance.AddTobuffer (VIDEO_SWITCH, "video" );
	clearbuffer(VIDEO_SWITCH);
	buffer_mutex.ReleaseMutex();
	
}

CHANGE AUDIO_SWITCH
{
	buffer_mutex.WaitForMutex();
	AVSwitchCSInstance.AddTobuffer (AUDIO_SWITCH, "audio" );
	clearbuffer(AUDIO_SWITCH);
	buffer_mutex.ReleaseMutex();
}


CHANGE COMBINED_SWITCH
{
	buffer_mutex.WaitForMutex();
	AVSwitchCSInstance.AddTobuffer (COMBINED_SWITCH, "comb" );
	clearbuffer(COMBINED_SWITCH);
	buffer_mutex.ReleaseMutex();
}


CHANGE VIDEO_WALL
{
	buffer_mutex.WaitForMutex();
	AVSwitchCSInstance.AddTobuffer (VIDEO_WALL, "vw" );
	clearbuffer(VIDEO_WALL);
	buffer_mutex.ReleaseMutex();
}

CHANGE SERIAL_SETTINGS
{
	buffer_mutex.WaitForMutex();
	AVSwitchCSInstance.SerialSettingsChg(SERIAL_SETTINGS);
	SERIAL_SETTINGS = "";
	buffer_mutex.ReleaseMutex();
}


CHANGE IR
{
	buffer_mutex.WaitForMutex();
	AVSwitchCSInstance.IRChg(IR);
	IR = "";
	buffer_mutex.ReleaseMutex();
}


THREADSAFE CHANGE CONFIGURE_TX_DEVICES
{
	AVSwitchCSInstance.AddTobuffer (CONFIGURE_TX_DEVICES, "oneway" );
	clearbuffer(CONFIGURE_TX_DEVICES);
}

THREADSAFE CHANGE CONFIGURE_RX_DEVICES
{
	AVSwitchCSInstance.AddTobuffer (CONFIGURE_RX_DEVICES, "oneway" );
	clearbuffer(CONFIGURE_RX_DEVICES);
}

THREADSAFE CHANGE FAVOURITES
{
	
	if(find(";", FAVOURITES, 1) > 0)
	{
		AVSwitchCSInstance.Favourites( FAVOURITES );
	}
	FAVOURITES = "";
}

THREADSAFE PUSH REDISCOVER_UNITS
{
	setarray(OUTPUT_NAME, " ");
	setarray(INPUT_NAME, " ");
	CONFIGURATION_STATUS = "";
	AVSwitchCSInstance.Reinitialise();
}         


THREADSAFE PUSH REBOOT_ALL_DEVICES
{
	CONFIGURATION_STATUS = "";
	AVSwitchCSInstance.RebootAllDevices();
}         

THREADSAFE PUSH AUTO_CONFIGURE_ALIASES
{
	CONFIGURATION_STATUS = "";
	AVSwitchCSInstance.AutoConfigureAliases();
}

THREADSAFE PUSH CLEAR_ALL_ALIAS
{
	CONFIGURATION_STATUS = "";
}

THREADSAFE PUSH STREAM_CONTROL
{
	AVSwitchCSInstance.SetStreamControl(1);
}

THREADSAFE RELEASE STREAM_CONTROL
{
	AVSwitchCSInstance.SetStreamControl(0);
}

THREADSAFE CHANGE UCMD
{
	AVSwitchCSInstance.ConsoleCommand(UCMD);
	clearbuffer(UCMD);	
}

THREADSAFE CHANGE CUSTOM_COMMAND
{
	AVSwitchCSInstance.CustomCommand(CUSTOM_COMMAND);
	clearbuffer(CUSTOM_COMMAND);	
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here	
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	WaitForInitializationComplete();
	
	RegisterDelegate(AVSwitchCSInstance, ConnectionStatusDelegate, ConnectionStatusFunc);
	RegisterDelegate(AVSwitchCSInstance, ConnectionStateDelegate, ConnectionStateFunc);
	RegisterDelegate(AVSwitchCSInstance, AliasExtractInDelegate, AliasExtractInFunc);
	RegisterDelegate(AVSwitchCSInstance, AliasExtractOutDelegate, AliasExtractOutFunc);
	RegisterDelegate(AVSwitchCSInstance, SwitchFeedbackDelegate, SwitchFeedbackFunc);
	RegisterDelegate(AVSwitchCSInstance, ConfigurationStatusDelegate, ConfigurationStatusFunc);
	RegisterDelegate(AVSwitchCSInstance, HotPlugFeedbackDelegate, HotPlugFeedbackFunc);
	
	wait(300) // Wait 3 seconds to allow debugging to be turned on
	{
		Print("Create Connection with %s:%d\n",IP_ADDRESS, PORT);
		if(IP_ADDRESS != "")
		AVSwitchCSInstance.CreateTCPConnection( ip_address, port, poll_time );
		AVSwitchCSInstance.SetStreamControl(STREAM_CONTROL);	
	}
}

